#!/bin/bash

source ./utility.sh
source .env

# Disable globbing. Without this, the * in the command will be expanded to
# the files in the current directory. This will cause a premature expansion
# of the glob.
set -f

# If no OpenAI API key is set, exit with an error.
if [ -z "$OPENAI_API_KEY" ]; then
  handle_error "no OpenAI API key" "Please check your .env file."
fi

# If no command is given, exit with an error.
if [ -z "$1" ]; then
  handle_error "no command given" "Sample usage: plz list all files in the current directory"
fi

# Convert the CLI args to a string.
input=$*

response=$(response_for "$input")

# If the OpenAI API key is invalid, exit with an error.
error_code=$(echo $response | jq -r ".error.code")
if [ "$error_code" == "invalid_api_key" ]
then
  handle_error "invalid OpenAI API key" "Please check your .env file."
fi

# If OpenAI reported an error, exit with an error.
error_message=$(echo $response | jq -r '.error.message')
if [ "$error_message" != "null" ]
then
  handle_error "OpenAI API error" $error_message
fi

command=$(parse_content "$response")

# Echo the command.
change_color "green"
echo $command

# Ask the user if they want an explanation of the command.
echo ""
prompt "Press Return to continue, or e for an explanation: "
if [[ $REPLY =~ ^[Ee]$ ]]
then
  echo ""
  change_color "yellow"

  explanation=$(explanation_for "$command")
  echo $(parse_content "$explanation")
  echo ""
fi

# Ask the user if they want to abort the command.
prompt "Press Return to continue, or n to cancel: "
if [[ $REPLY =~ ^[Nn]$ ]]
then
  echo ""
  echo ""
  abort
fi

change_color "blue"
echo ""
echo "Executing command..."
echo ""

change_color "reset"

# Re-enable globbing.
set +f
eval "$command"
